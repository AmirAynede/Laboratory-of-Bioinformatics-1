# -*- coding: utf-8 -*-
"""1-Structure-Superimposition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gS4-2aT2A3MwPP3M51DxMgKFWlBWP7xz

#**Protein Structure Superimposition**

**Exercise 1: Write a python script for superimposing two 3D
structures.**

The script that should take in input two PDB structures, the relative chains and their residue intervals. The script has to include the following steps:

1.   Parse the PDB file
2.   Select the subset of residues
3.   Calculate the transformation that minimizues the RMSD

The last step is should be performed using the [biopython](https://biopython.org/) library. In particular we should use the module [SVDSuperimposer](https://biopython.org/DIST/docs/api/Bio.SVDSuperimposer-module.html) that allow to calculate the best transformation and the RMSD.


For addressing this task we build a basic python script with two functions.

1.   Parse the PDB file, select the subset of residues
2.   Call SVDSuperimposer and return the transformation (Rotation matrix and Transaltion vector) and the RMSD.

As a reference for the selection of the coordinates in the PDB file consider the following fields in the [ATOM record](https://www.wwpdb.org/documentation/file-format-content/format33/sect9.html#ATOM):

*   ATOM: 1-4
*   ATOM TYPE: 13-16
*   RESIDUE TYPE: 18-20
*   CHAIN: 22
*   RESIDUE NUMBER: 23-26
*   X-COORD: 31-38
*   Y-COORD: 39-46
*   Z-COORD: 47-54

Below is reported a simple script to solve this exercise.
"""

#!/usr/bin/env python
import sys
from Bio.SVDSuperimposer import SVDSuperimposer
import numpy as np


def get_list(naa):
	vpos=[]
	l1=naa.split(',')
	for i in l1:
		l2=i.split('-')
		if len(l2)==1:
			vpos=vpos+l2
		elif len(l2)==2:
			try:
				vpos=vpos+[str(j) for j in range(int(l2[0]),int(l2[1])+1)]
			except:
				sys.stderr.write('ERROR: Incorrect input format '+naa)
				sys.exit(1)
		else:
			sys.stderr.write('ERROR: Incorrect input format '+naa)
			sys.exit(1)
	return vpos


def get_ca_atoms(pdbfile,chain,rlist,atom='CA'):
		l_coord=[]
		fpdb=open(pdbfile)
		for line in fpdb:
			if line[:4] != 'ATOM': continue
			if line[21] != chain: continue
			if line[22:26].strip() not in rlist: continue
			if line[12:16].strip() != atom: continue
      if line[16]!=" " and line[16]!="A": continue
			x=float(line[30:38])
			y=float(line[38:46])
			z=float(line[46:54])
			l_coord.append([x,y,z])
		return l_coord


def get_rmsd(coord1,coord2):
		if len(coord1)!=len(coord2):
				sys.stderr.write('ERROR: The sets of coordinates have different size.')
				sys.exit(1)
		svd=SVDSuperimposer()
		svd.set(np.array(coord1),np.array(coord2))
		svd.run()
		rmsd=svd.get_rms()
		rot,tran=svd.get_rotran()
		return rot,tran,rmsd


if __name__ == '__main__':
	if len(sys.argv)==7:
		pdbfile1=sys.argv[1]
		pdbfile2=sys.argv[2]
		chain1=sys.argv[3]
		chain2=sys.argv[4]
		list1=get_list(sys.argv[5])
		list2=get_list(sys.argv[6])
		l_coord1=get_ca_atoms(pdbfile1,chain1,list1)
		l_coord2=get_ca_atoms(pdbfile2,chain2,list2)
		rot,tran,rmsd=get_rmsd(l_coord1,l_coord2)
		print (f'R= [[ {rot[0][0]:7.3f}, {rot[0][1]:7.3f}, {rot[0][2]:7.3f} ],\n'+\
		       f'    [ {rot[1][0]:7.3f}, {rot[1][1]:7.3f}, {rot[1][2]:7.3f} ],\n'+\
					 f'    [ {rot[2][0]:7.3f}, {rot[2][1]:7.3f}, {rot[2][2]:7.3f} ]]')
		print (f'T= [ {tran[0]:5.3f}, {tran[1]:5.3f}, {tran[2]:5.3f} ]')
		print (f'RMSD= {rmsd:5.3f}')
	else:
		print ("python super_pdb.py pdb1 pdb2 chain1 chain2 residues1 residues2")

"""To download a PDB structure directly form the command line you can use  the commad wget. For example, to download the PDB file 3O20 in the the directory data you should run the following command:"""

!wget  https://files.rcsb.org/view/3O20.pdb -O data/3O20.pdb

!python script/super_pdb.py data/3O20.pdb data/3ZCF.pdb A A 10-60 10-60

"""**WARNING**: This code is not safe in presence of Alternate locations in column 17 of the ATOM field."""